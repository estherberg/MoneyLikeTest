generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Interaction {
  id         String          @id @default(cuid())
  creative   Creative        @relation(fields: [creativeId], references: [id], onDelete: Cascade)
  creativeId String
  user       User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  itype      InteractionType
  metadata   Json?
  ts         DateTime        @default(now())

  @@unique([userId, creativeId, itype]) // d√©dup: 1 interaction/type par user/creative
  @@index([creativeId, itype, ts])
}
enum InteractionType {
  CLICK
  LIKE
  VOTE
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  role        Role          @default(USER)
  createdAt   DateTime      @default(now())
  wallet      Wallet?
  impressions Impression[]
  clicks      Click[]
  payouts     Payout[]
  Interaction Interaction[]
}

model Wallet {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt
}

model Advertiser {
  id           String     @id @default(cuid())
  orgName      String
  billingEmail String     @unique
  campaigns    Campaign[]
}

model Campaign {
  id           String         @id @default(cuid())
  name         String
  advertiser   Advertiser     @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  advertiserId String
  objective    Objective
  status       CampaignStatus @default(DRAFT)
  budget       Int
  cpc          Int?
  cpm          Int?
  targeting    Json?
  createdAt    DateTime       @default(now())
  creatives    Creative[]
}

model Creative {
  id          String         @id @default(cuid())
  campaign    Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  ctype       CreativeType
  title       String
  body        String?
  mediaUrl    String?
  cta         String?
  lang        String?
  status      CreativeStatus @default(AI_DRAFT)
  impressions Impression[]
  clicks      Click[]
  Interaction Interaction[]
}

model Impression {
  id         String   @id @default(cuid())
  creative   Creative @relation(fields: [creativeId], references: [id],  onDelete: Cascade)
  creativeId String
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  ts         DateTime @default(now())
}

model Click {
  id         String   @id @default(cuid())
  creative   Creative @relation(fields: [creativeId], references: [id], onDelete: Cascade)
  creativeId String
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  ts         DateTime @default(now())
}

model Payout {
  id     String       @id @default(cuid())
  user   User         @relation(fields: [userId], references: [id])
  userId String
  amount Int
  status PayoutStatus @default(PENDING)
  ts     DateTime     @default(now())
}

enum Role {
  USER
  ADVERTISER
  ADMIN
}

enum Objective {
  CTR
  LEAD
  VIEW
}

enum CampaignStatus {
  DRAFT
  RUNNING
  PAUSED
}

enum CreativeType {
  IMAGE
  VIDEO
  POLL
}

enum CreativeStatus {
  AI_DRAFT
  APPROVED
  REJECTED
}

enum PayoutStatus {
  PENDING
  PAID
}


